<?php

function dlts_bitstream_menu() {
  $items = array();

  $items['admin/config/bitstream'] = array(
    'title' => 'Bitstream handling settings',
    'description' => 'Set up Flowplayer etc.',
    'page callback' => 'drupal_get_form',
	  'page arguments' => array('dlts_bitstream_config'),
	  'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
	  'file' => 'admin.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function dlts_bitstream_field_info() {
  return array(
    'dlts_bitstream_field' => array(
      'label' => t('DLTS Bitstream'),
      'description' => t('Store data about a media bitstream.'),
      'default_widget' => 'dlts_bitstream_field',
      'default_formatter' => 'dlts_bitstream_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function dlts_bitstream_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
		if (!empty($item['identifier'])) {
			 if (! preg_match('/[0-9a-zA-Z_-]/', $item['identifier'])) {
					$errors[$field['field_name']][$langcode][$delta][] = array(
						'error' => 'Bitstream identifier invalid',
			  );
			}
		}
		if (!empty($item['width'])) {
			if (!is_numeric($item['width']) || (int)$item['width'] != $item['width']) {
					$errors[$field['field_name']][$langcode][$delta][] = array(
						'error' => 'Width must be an integer',
						);
			}
		}
		if (!empty($item['height'])) {
			if (!is_numeric($item['height']) || (int)$item['height'] != $item['height']) {
					$errors[$field['field_name']][$langcode][$delta][] = array(
						'error' => 'Height must be an integer',
						);
			}
		}
		if (!empty($item['bitrate'])) {
			if (!is_numeric($item['bitrate']) || (int)$item['bitrate'] != $item['bitrate']) {
					$errors[$field['field_name']][$langcode][$delta][] = array(
						'error' => 'Bitrate must be an integer',
						);
			}
		}
  }
}

/**
 * Implement hook_field_is_empty().
 */
function dlts_bitstream_field_is_empty($item, $field) {
  return empty($item['identifier']);
}


/**
 * Implementation of hook_field_formatter_info().
 */
function dlts_bitstream_field_formatter_info() {
  return array(
    'dlts_bitstream_default_formatter' => array(
      'label' => t('Default'),
      'field types' => array('dlts_bitstream_field'),
    ),

  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - field_example_simple_text just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - field_example_color_background does the same but also changes the
 *   background color of div.region-content.
 */
function dlts_bitstream_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'dlts_bitstream_default_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = '<p>' . t($item['identifier']) . ': ' . t($item['bitrate']) . 'Kbps</p>';
      }
      break;
  }

  return $element;
}



/**
 * Implements hook_field_widget_info().
 */
function dlts_bitstream_field_widget_info() {
  return array(
    'dlts_bitstream_default' => array(
      'label' => t('Bitstream file for streaming video'),
      'field types' => array('dlts_bitstream_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function dlts_bitstream_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $element += array(
		'#delta' => $delta,
		'#type' => 'fieldset',
		'identifier' => array(
				'#type' => 'textfield',
				'#title' => 'Bitstream Identifier',
				'#size' => 50,
				'#default_value' => isset($items[$delta]['identifier']) ? $items[$delta]['identifier'] : '',
				),
		'class' => array(
				'#type' => 'textfield',
				'#title' => 'Context class (how to serve the bitstream)',
				'#size' => 50,
				'#default_value' => isset($items[$delta]['class']) ? $items[$delta]['class'] : 'default',
				),
		'media_type' => array(
				'#type' => 'textfield',
				'#title' => 'Media Type',
				'#size' => 50,
				'#default_value' => isset($items[$delta]['media_type']) ? $items[$delta]['media_type'] : '',

				),
		'format' => array(
				'#type' => 'textfield',
				'#title' => 'Format',
				'#size' => 50,
				'#default_value' => isset($items[$delta]['format']) ? $items[$delta]['format'] : '',
				),
		'filesize' => array(
				'#type' => 'textfield',
				'#title' => 'Filesize',
				'#size' => 50,
				'#default_value' => isset($items[$delta]['filesize']) ? $items[$delta]['filesize'] : '',
				),
		'is_hd' => array(
			'#type' => 'select',
			'#title' => 'Is it HD?',
			'#options' => array('0' => 'No', '1' => 'Yes'),
			'#default_value' => isset($items[$delta]['is_hd']) ? $items[$delta]['is_hd'] : '',
				),
		'bitrate' => array(
			'#type' => 'textfield',
			'#title' => 'Bitrate (in Kbps)',
			'#size' => 50,
			'#default_value' => isset($items[$delta]['bitrate']) ? $items[$delta]['bitrate'] : '',
		   ),
		'width' => array(
				'#type' => 'textfield',
				'#title' => 'Width',
				'#size' => 5,
				'#default_value' => isset($items[$delta]['width']) ? $items[$delta]['width'] : 0,
				),
		'height' => array(
				'#type' => 'textfield',
				'#title' => 'Height',
				'#size' => 5,
				'#default_value' => isset($items[$delta]['height']) ? $items[$delta]['height'] : 0,
				),
		);

  return $element;
}



/**
 * Implements hook_field_instance_settings_form().
 */
function dlts_bitstream_field_instance_settings_form($field, $instance) {
  $form = array();
  $form['display'] = array(
    '#tree' => TRUE,
  );
  $form['attributes'] = array(
    '#tree' => TRUE,
  );
  return $form;
}

/**
 * Validate the field settings form.
 */
function dlts_bitstream_field_settings_form_validate($element, &$form_state, $complete_form) {

}

/**
 * Implements hook_field_load().
 */

/**
 * Implements hook_field_presave().
 */

/**
 * Implements hook_field_prepare_view().
 */

/**
 * Prepares the item attributes and filename for storage.
 */

/**
 * Implements hook_theme().
 */


/**
 * FAPI theme for an individual text elements.
 */
function theme_dlts_bitstream_field($vars) {
  drupal_add_css(drupal_get_path('module', 'link') .'/dlts_bitstream.css');

  $element = $vars['element'];
  // Prefix single value link fields with the name of the field.


  $output = '';
  $output .= '<div class="link-field-subrow clearfix">';
  if (isset($element['title'])) {
    $output .= '<div class="link-field-title link-field-column">'. drupal_render($element['identifier']) .'</div>';
  }
  $output .= '<div class="dlts-bitstream-link-field-identifier'. (isset($element['identifier']) ? ' link-field-column' : '') .'">'. drupal_render($element['identifier']) .'</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_element_info().
 */
function dlts_bitstream_element_info() {
  $elements = array();
  $elements['dlts_bitstream_field'] =  array(
    '#input' => TRUE,
  );
  return $elements;
}


/**
 * Process the link type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function dlts_bitstream_field_process($element, $form_state, $complete_form) {
  $settings = &$form_state['field'][$element['#field_name']][$element['#language']]['instance']['settings'];
  $element['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifier'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );
	$element['class'] = array(
		'#type' => 'varchar',
	  '#title' => t('Class'),
	  '#required' => TRUE,
	  '#default_value' => 'default',
	);
	$element['media_type'] = array(
		'#type' => 'varchar',
		'#title' => t('Media Type'),
    '#required' => TRUE,
    '#default_value' => 'video/mp4',

	);
	$element['format'] = array(
		'#type' => 'varchar',
		'#title' => t('Format'),
    '#required' => TRUE,
    '#default_value' => 'MPEG-4',

	);
	$element['filesize'] = array(
		'#type' => 'int',
		'#title' => t('Filesize'),
    '#required' => TRUE,
    '#default_value' => 0,

	);
	$element['is_hd'] = array(
		'#type' => 'int',
		'#title' => t('Is HD'),
    '#required' => TRUE,
    '#default_value' => 0,

	);
  $element['bitrate'] = array(
    '#type' => 'int',
    '#title' => t('Bitrate'),
    '#required' => TRUE,
    '#default_value' => 300,
  );
  $element['width'] = array(
    '#type' => 'int',
    '#title' => t('Width'),
    '#required' => FALSE,
    '#default_value' => 0,
  );
  $element['height'] = array(
    '#type' => 'int',
    '#title' => t('Height'),
    '#required' => FALSE,
    '#default_value' => 0,
  );

  return $element;
}

/**
 * Implements hook_migrate_field_alter().
 */

function dlts_bitstream_content_migrate_field_alter(&$field_value, $instance_value) {
  if ($field_value['type'] == 'dlts_bitstream') {
    // need to change the type:
    $field_value['type'] = 'dlts_bitstream_field';
  }
}

/**
 * Implements hook_migrate_instance_alter().
 *
 * Widget type also changed to link_field.
 */
function dlts_bitstream_content_migrate_instance_alter(&$instance_value, $field_value) {
  if ($instance_value['widget']['module'] == 'dlts_bitstream'
      && $instance_value['widget']['type'] == 'dlts_bitstream') {
    $instance_value['widget']['type'] = 'dlts_bitstream_field';
  }
}

/*
 * Utility functions
 */

/*
 * Return a list of available Flowplayer Flash Plug-ins
 * http://flowplayer.org/plugins/index.html
 */

function dlts_bitstream_available_flowplayer_plugins_flash() {
  $plugins = file_scan_directory( libraries_get_path('flowplayer') . '/plugins/flash', '/.*\.swf$/' );
  $available = array();

  foreach( $plugins as $path => $plugin ) {
    if ( ( preg_match( '/.([a-z]*)-\d.{4}$/', $plugin->name, $matches ) ) ) {
      $available[$matches[1]] = url( $path );
    }
  }
  return $available;
}

/*
 * Return Flowplayer path and type
 */

function dlts_bitstream_available_flowplayer() {
  $plugins = file_scan_directory( libraries_get_path('flowplayer'), '/.*\.swf$/', array( 'recurse' => FALSE ) );
  $available = array();

  foreach( $plugins as $path => $plugin ) {
    if ( ( preg_match( '/flowplayer\.?(commercial)?-?(\d\.\d{1}\.\d{1})-?(dev)?$/', $plugin->name, $matches ) ) ) {
      $available[$plugin->name][$matches[1]]['url'] = url( $path );
    }
  }
  return $available;
}