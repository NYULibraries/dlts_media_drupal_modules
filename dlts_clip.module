<?php

/**
 * A wildcard loader for dlts_clip nodes, using the clip identifier.
 *
 * @parameter $identifier
 *  The value of field_identifier for a dlts_clip node.
 *
 * @return
 * A node object with the given value for field_identifier.
 *
 * @todo
 * field_identifier is supposed to be unique across all books, but we do
 * no checking of this assumption.
 * @todo
 * Does the query need to be tagged as node_access? We're checking node_access
 * via the menu system, but since the loader is called before access is
 * checked, adding a check here might save an entity_load if the user's not
 * going to have access anyway, at the cost of an extra JOIN here.
 */
function dlts_clip_load($identifier) {
  $query = new EntityFieldQuery;
  $identifier = filter_xss($identifier);
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'dlts_clip')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_identifier', 'value', $identifier, '=')
    ->addTag('node_access')
    ->execute();
  if (!empty($result['node'])) {
  	$keys = array_keys($result['node']);
  	return node_load( array_pop( $keys ) );
  }
  else {
  	return FALSE;
  }
}

/**
 * A wildcard loader for dlts_creativework nodes, using the CreativeWork identifier.
 *
 * @parameter $identifier
 *  The value of field_identifier for a dtls_creativework node.
 *
 * @return
 * A node object with the given value for field_identifier.
 *
 * @todo
 * field_identifier is supposed to be unique across all CreativeWork, but we do
 * no checking of this assumption.
 * @todo
 * Does the query need to be tagged as node_access? We're checking node_access
 * via the menu system, but since the loader is called before access is
 * checked, adding a check here might save an entity_load if the user's not
 * going to have access anyway, at the cost of an extra JOIN here.
 */
function dlts_creativework_load($identifier) {
	dpm(__FUNCTION__);
  $query = new EntityFieldQuery;

  $identifier = filter_xss($identifier);

  $result = $query
  	->entityCondition('entity_type', 'node')
  	->entityCondition('bundle', 'dlts_creativework')
  	->propertyCondition('status', 1)
  	->fieldCondition('field_identifier', 'value', $identifier, '=')
  	->addTag('node_access')
  	->execute();

  if ( !empty($result['node']) ) {
    $keys = array_keys( $result['node'] );
  	return node_load( array_pop( $keys ) );
  }

}

/**
 * A wildcard loader for dlts_playlist nodes, using the playlist identifier.
 *
 * @parameter $identifier
 *  The value of field_identifier for a dlts_playlist node.
 *
 * @return
 * A node object with the given value for field_identifier.
 *
 * @todo
 * field_identifier is supposed to be unique across all playlist, but we do
 * no checking of this assumption.
 * @todo
 * Does the query need to be tagged as node_access? We're checking node_access
 * via the menu system, but since the loader is called before access is
 * checked, adding a check here might save an entity_load if the user's not
 * going to have access anyway, at the cost of an extra JOIN here.
 */
function dlts_playlist_load($identifier) {
  $query = new EntityFieldQuery;
  $result = $query
   	->entityCondition('entity_type', 'node')
   	->entityCondition('bundle', 'dlts_playlist')
   	->propertyCondition('status', 1)
   	->fieldCondition('field_identifier', 'value', filter_xss($identifier), '=')
   	->addTag('node_access')
   	->execute();
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
   	return node_load(array_pop( $keys));
  }
}

/**
 * Implements hook_menu().
 */
function dlts_clip_menu() {
  return array(
    'creative-work/%dlts_creativework/mode/embed' => array(
	    'title' => 'Creative Work embed view',
	    'access arguments' => array('access content'),
	    'page callback' => 'dlts_clip_embed_display',
	    'page arguments' => array(1),
	    'delivery callback' => 'drupal_deliver_html_page',
	    'type' => MENU_CALLBACK,
    ),
    'playlists/%dlts_playlist/mode/embed' => array(
      'title' => 'Playlist embed view',
	    'access arguments' => array('access content'),
	    'page callback' => 'dlts_clip_embed_display',
	    'page arguments' => array(1),
	    'delivery callback' => 'drupal_deliver_html_page',
	    'type' => MENU_CALLBACK,
    ),
    'clip/%dlts_clip/mode/embed' => array(
      'title' => 'Clip embed view',
	    'access arguments' => array('access content'),
	    'page callback' => 'dlts_clip_embed_display',
	    'page arguments' => array(1),
	    'delivery callback' => 'drupal_deliver_html_page',
	    'type' => MENU_CALLBACK,
    ),
    'admin/config/dlts-clip' => array(
      'title' => 'Flowplayer',
      'description' => 'Configure settings related to Flowplayer.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dlts_clip_player_flowplayer_config'),
      'access arguments' => array('access administration pages'),
      'file' => 'inc/dlts_clip.admin.inc',
    ),
  );
}

/**
 * Implements hook_init().
 */
function dlts_clip_init() {
  /** load player helper */
  module_load_include('inc', 'dlts_clip', 'inc/flowplayer');
  /** load Flowplayer configuration */
  $conf = dlts_clip_flowplayer();
  /** load Mobile Detect */
  $detect = dlts_clip_mobile_detect();
  /** find a more proper place to place this */
  /** add CSS theme */
  drupal_add_css(libraries_get_path('flowplayer-html') . '/skin/functional.css', array( 'group' => CSS_DEFAULT, 'every_page' => FALSE));
  /** add Flowplayer JavaScript API */
  if ($detect['isiOS'] || $detect['isSafari']) {
    drupal_add_js ( libraries_get_path('flowplayer-html') . '/flowplayer.js' ) ;
    drupal_add_css ( drupal_get_path('module', 'dlts_clip') . '/css/classic.css', array( 'group' => CSS_DEFAULT, 'every_page' => FALSE ) ) ;
  }
  else {
    drupal_add_js ( $conf['flowplayer']['player']['js_api'] ) ;
  }
  $jsConf = array ( 'dlts_clip' => array (
    'player' => $conf['flowplayer']['player']  ,
    'detect' => dlts_clip_mobile_detect () ,
  ));
  drupal_add_js($jsConf, 'setting');
}

/**
 * Implements hook_custom_theme().
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_custom_theme/7
 * Find out the if this request is "embed"
 */
function dlts_clip_custom_theme () {
  /** Get the arguments from Drupal path */
  $arg = arg();
  /** count should be eq 4. we want to match /{resource}/{identifier}/mode/embed */
  $count = count($arg);
  /** we have 4 arguments and they match a embed request; return embed theme instead of the default */
  if ($count > 3 && $arg[$count - 1] === 'embed' && $arg[$count - 2] === 'mode') {
    return 'dlts_embed';
  }
}

/**
 * Implements hook_field_info().
 */
function dlts_clip_field_info () {
	dpm(__FUNCTION__);
  return array(
    'dlts_clip_field' => array(
      'label' => t('DLTS Clip'),
      'description' => t('Store data about a media Clip.'),
      'default_widget' => 'dlts_clip_field',
      'default_formatter' => 'dlts_clip_default_formatter',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dlts_clip_theme($existing, $type, $theme, $path) {
	dpm(__FUNCTION__);
  return array (
    'dlts_clip_media' => array (
      'variables' => array (
      	'identifier' => NULL,
      	'f4m' => NULL,
      	'type' => NULL,
      	'm3u' => NULL,
      	'pd' => NULL,
      ),
    ),
    'dlts_clip_media_js' => array (
  	  'variables' => array (
  		'identifier' => NULL,
  		'f4m' => NULL,
  		'm3u' => NULL,
  		'pd' => NULL,
  	  ),
  	),
    array (
      'dlts_clip_oembed' => array(
        'arguments' => array(
          'url' => NULL,
          'width' => NULL,
          'height' => NULL,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function dlts_clip_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
	dpm(__FUNCTION__);
  foreach ($items as $delta => $item) {
  	if (!empty($item['identifier'])) {
      if (! preg_match('/[0-9a-zA-Z_-]/', $item['identifier'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array( 'error' => 'Clip identifier invalid', );
      }
    }
  }
}

/**
 * Implement hook_field_is_empty().
 */
function dlts_clip_field_is_empty($item, $field) {
	dpm(__FUNCTION__);
  /** @TODO: check for the manifest */
  return empty($item['identifier']);
}

/**
 * Implementation of hook_node_view()
 * Act on a node that is being assembled before rendering.
 * See: https://api.drupal.org/api/drupal/modules%21node%21node.api.php/function/hook_node_view/7
 */
function dlts_clip_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'dlts_playlist' :
  	  dlts_embed_node_view_dlts_playlist($node);
  	  break;
    case 'dlts_clip' :
      dlts_embed_node_view_dlts_clip($node);
  	  break;
    case 'dlts_bitstream_set' :
  	  dlts_embed_node_view_dlts_bitstream_set($node);
  	  break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function dlts_clip_field_formatter_info() {
  return array(
    'dlts_clip_default_formatter' => array(
      'label' => t('Default'),
      'field types' => array('dlts_clip_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function dlts_clip_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = $classes = array();
  if (field_info_instance('node', 'field_media_type', $entity->type)) {
    $wrapper = entity_metadata_wrapper('node', $entity);
    $classes['media_type'] = $wrapper->field_media_type->value();
  }
  switch ($display['type']) {
    case 'dlts_clip_default_formatter' :
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('dlts_clip_media' , array_merge($item, $classes));
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function dlts_clip_field_widget_info () {
	dpm(__FUNCTION__);
  return array (
    'dlts_clip_default' => array (
      'label' => t('Clip file for streaming video'),
      'field types' => array ('dlts_clip_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function dlts_clip_field_widget_form (&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	dpm(__FUNCTION__);
  $element += array(
    '#delta' => $delta,
    '#type' => 'fieldset',
    'identifier' => array(
      '#type' => 'textfield',
      '#title' => 'Clip Identifier',
      '#size' => 50,
      '#default_value' => isset($items[$delta]['identifier']) ? $items[$delta]['identifier'] : '',
      '#attributes' => array(
        'placeholder' => 'xxxxxxxxxx',
      ),
    ),
    'f4m' => array(
      '#type' => 'textfield',
      '#title' => 'Flash Media Manifest (F4M)',
      '#size' => 50,
      '#default_value' => isset($items[$delta]['f4m']) ? $items[$delta]['f4m'] : '',
      '#attributes' => array(
        'placeholder' => 'http://example.com/manifest.f4m',
      ),
    ),
    'm3u' => array(
      '#type' => 'textfield',
      '#title' => 'M3U Playlist',
      '#size' => 50,
      '#default_value' => isset($items[$delta]['m3u']) ? $items[$delta]['m3u'] : '',
      '#attributes' => array(
        'placeholder' => 'http://example.com/manifest.m3u',
      ),
    ),
    'pd' => array(
      '#type' => 'textfield',
      '#title' => 'Progressive Download; media file over HTTP',
      '#size' => 50,
      '#default_value' => isset($items[$delta]['pd']) ? $items[$delta]['pd'] : '',
      '#attributes' => array(
        'placeholder' => 'http://example.com/clip.mp4',
      ),
    ),
  );

  return $element ;

}

/**
 * Implements hook_field_instance_settings_form().
 */
function dlts_clip_field_instance_settings_form($field, $instance) {
	dpm(__FUNCTION__);
  return array(
    'display' => array(
      '#tree' => TRUE,
    ),
  	'attributes' => array(
      '#tree' => TRUE,
    ),
  );
}

function dlts_embed_node_view_dlts_clip($node) {

  dpm(time() . ' ' . __FUNCTION__);

	/** load Mobile Detect */
	$detect = dlts_clip_mobile_detect();
	
  /** Wrap it with Entity API */
  $dlts_clip_wrapper = entity_metadata_wrapper('node', $node);

  $identifier = $dlts_clip_wrapper->field_identifier->value();

  $start = (int) $dlts_clip_wrapper->field_start->value();

  $duration = (int) $dlts_clip_wrapper->field_duration->value();
  
  $thumbnail = $dlts_clip_wrapper->field_thumbnail->value();

  $images = array();

  foreach (array('poster', 'thumbnail', 'large', 'playlist') as $style) {
  	$images[$style] = image_style_url($style, $thumbnail['uri']);
  }

  /** Wrap it with Entity API */
  $bitstream_ref = $dlts_clip_wrapper->field_bitstream_ref->value();
  
  $wrapper = entity_metadata_wrapper('node', $bitstream_ref);
  
  $media_type = $wrapper->field_media_type->value();
  
  if (empty($media_type)) {
    $media_type = 'unknown';
  }
  
  $bitstream = array_shift(array_values($bitstream_ref->field_bitstream[$node->language]));

  $data = array(
    'image' => $images,
    'duration' => $duration,
    'identifier' => $bitstream['identifier'],
    'start' => $start,
    'type' => $media_type,
  );
  
  if ($detect['isiOS'] || $detect['isSafari']) {
    $data['url'] = $bitstream['m3u'] ;
    $markup = dlts_clip_clip_ios_markup($data);
  }
  else {
    $data['url'] = $bitstream['f4m'] ;
    $markup = dlts_clip_clip_markup($data);
  }

  drupal_add_js(array('dlts_clip' => array('media' => array($bitstream['identifier'] => array('type' => $media_type,'duration' => $duration , 'start' => $start)))), 'setting');

  $node->content['field_bitstream_ref'] = array('#type' => 'markup', '#markup' => $markup);

}

function dlts_embed_node_view_dlts_bitstream_set($node) {

	/** load Mobile Detect */
	$detect = dlts_clip_mobile_detect();

	/** Wrap it with Entity API */
	$wrapper = entity_metadata_wrapper('node', $node);

	$identifier = $wrapper->field_identifier->value();

	$data = array_shift(array_values($node->field_bitstream[$node->language]));

  $data['media_type'] = 'media';

  if (field_info_instance('node', 'field_media_type', $node->type)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $field_media_type = $wrapper->field_media_type->value();
    if(!empty($field_media_type)) {
      $data['media_type'] = 'media';
    }
  }

	if ($detect['isiOS'] || $detect['isSafari']) {
	  $markup = dlts_clip_bitstream_ios_markup($data);
	}
	else {
	  $markup = dlts_clip_bitstream_markup($data);
	}

	drupal_add_js(array('dlts_clip' => array('media' => array($identifier => $data))), 'setting');

	$node->content['field_bitstream'] = array('#type' => 'markup', '#markup' => $markup);

}

function dlts_embed_node_view_dlts_playlist($node) {

	$types = $media = $references = array();

	/** load Mobile Detect */
	$detect = dlts_clip_mobile_detect();

  /** Wrap it with Entity API */
  $dlts_playlist_wrapper = entity_metadata_wrapper('node', $node);

  $playlist_identifier = $dlts_playlist_wrapper->field_identifier->value();

  $playlist_representative_image = $dlts_playlist_wrapper->field_thumbnail->value();

  $poster = image_style_url('poster', $playlist_representative_image['uri']);

  $data = array(
  	'identifier' => $playlist_identifier,
  	'poster' => $poster,
  	'type' => $node->type,
  	'stream' => array(),
  );

  foreach ($dlts_playlist_wrapper->field_clip_ref->getIterator() as $clip) {

  	$identifier = $clip->field_identifier->value();

  	$references[] = $identifier;

  	$bitstream_ref = $clip->field_bitstream_ref->value();
  	
    /** Wrap it with Entity API */
    $wrapper = entity_metadata_wrapper('node', node_load($bitstream_ref->nid));
    
  	$bitstream = $bitstream_ref->field_bitstream[$node->language][0];
  	
  	$media_type = $wrapper->field_media_type->value();
  	
  	if (empty($media_type)) $media_type = 'unknown';
  	
  	if (!in_array( $media_type, $types)) $types[] = $media_type;
  	
  	$bitstream['type'] = $media_type;

  	$bitstream['start'] = $clip->field_start->value();
  	
  	$bitstream['duration'] = $clip->field_duration->value();

  	$representative_image = $clip->field_thumbnail->value();

  	$bitstream['representative_image'] = array();

  	foreach (array('poster', 'thumbnail', 'large', 'playlist', 'thumbnails_playlist') as $style) {
  		$bitstream['representative_image'][$style] = image_style_url($style, $representative_image['uri']);
  	}

  	/** for now until i get this right */
  	$data['stream'][$identifier] = $bitstream;
  	
  	unset($wrapper);

  }
  
  if ($detect['isiOS'] || $detect['isSafari']) {
  	$markup = dlts_clip_playlist_ios_markup($data);
  }
  else {
  	$markup = dlts_clip_playlist_markup($data);
  }
  
  if (count($types) < 2) $type = array_pop($types);
  else {
    $type = 'multimedia';
  }

  drupal_add_js(array('dlts_clip' => array('types' => $type, 'playlists' => array($playlist_identifier => $references), 'media' => $data['stream'])), 'setting');

  // render the player as a playlist instead of multiple players
  // we change the content of this field with the render value needed
  // to initiate a flowplayer player with a playlist
  $node->content['field_clip_ref'] = array('#type' => 'markup' , '#markup' => $markup);

}

/**
 * Implements hook_element_info().
 */
function dlts_clip_element_info () {
  $elements = array();
  $elements['dlts_clip_field'] =  array(
    '#input' => TRUE,
  );
  return $elements;
}

/**
 * Process the link type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function dlts_clip_field_process($element, $form_state, $complete_form) {
  $settings = &$form_state['field'][$element['#field_name']][$element['#language']]['instance']['settings'];
  $element['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifier'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );
  $element['f4m'] = array(
    '#type' => 'varchar',
    '#title' => t('Flash Media Manifest (F4M)'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );
  $element['m3u'] = array(
    '#type' => 'varchar',
    '#title' => t('M3U Playlist'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );
  $element['pd'] = array(
    '#type' => 'varchar',
    '#title' => t('M3U Playlist'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );
  return $element;
}

function dlts_embed_dlts_clip(&$vars) {
	dpm(__FUNCTION__);
  /** Wrap it with Entity API */
  $ewrapper = entity_metadata_wrapper ( 'node', $vars['node'] ) ;
  $bitstream_ref = $ewrapper->field_bitstream_ref->value() ;
  if ( isset ( $bitstream_ref->nid ) ) {
    /** Wrap it with Entity API */
    $bitstream_wrapper = entity_metadata_wrapper('node', $bitstream_ref);
    $duration = (int) $ewrapper->field_duration->value() ;
    $start = (int) $ewrapper->field_start->value() ;
    $identifier = $bitstream_wrapper->field_identifier->value() ;
    drupal_add_js ( array ( 'dlts_clip' => array ( 'media' => array ( $identifier => array ( 'url' => $identifier , 'duration' => $duration , 'start' => $start ) ) ) ) , 'setting' ) ;
  }

}

/**
 * Implements hook_entity_info_alter().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_entity_info_alter/7
 */
function dlts_clip_entity_info_alter(&$entity_info) {
	dpm(__FUNCTION__);
  $entity_info['node']['view modes']['embed'] = array(
    'label' => t('Embed mode'),
    'custom settings' => TRUE,
  ) ;
}

/**
 * Implements hook_preprocess_node().
 * Provide template for view mode is "embed"
 * https://api.drupal.org/api/drupal/modules!node!node.module/function/template_preprocess_node/7
 */
function dlts_clip_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'embed') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__embed';
  }
}

/**
 * Given a node, return the Embed view. Embed view can be customize in manage display section
 * for each Content type e.g., {site}/admin/structure/types/manage/{content-type}/display
 */
function dlts_clip_embed_display($node) {
	dpm(__FUNCTION__);
  return node_view($node, 'embed');
}

/**
 * Theme functions
 */
function theme_dlts_clip_media($vars) {
  // JS data
  drupal_add_js(array('dlts_clip' => array('media' => array ($vars['identifier'] => $vars))), 'setting');

  // HTML markup
  $render_array = array(
    '#type' => 'container',
	  '#attributes' => array(
	    'id' => $vars['identifier'],
	    'data-f4m' => $vars['f4m'],
	    'data-hsl' => $vars['m3u'],
	    'class' => array($vars['media_type']),
    ),
	  'span-0' => array(
	    '#theme' => 'html_tag',
	    '#tag' => 'span',
	    '#value' => '',
	    '#attributes' => array(
	      'class' => array('play'),
        'alt' => t('Play this video')
      ),
    ),
  );
  return drupal_render($render_array);
}

function theme_dlts_clip_media_js($vars) {
	dpm(__FUNCTION__);
  drupal_add_js(array('dlts_clip' => array('media' => array ($vars['identifier'] => $vars))), 'setting');
}

function dlts_clip_playlist_markup($vars) {
	dpm(__FUNCTION__);
	$classes = array();
	if (isset($vars['media_type'])) {
		$classes[] = $vars['media_type'];
	}
	if (isset($vars['type'])) {
		$classes[] = $vars['type'];
	}
  // HTML markup
  $render_array = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => $vars['identifier'],
      'class' => $classes,
    ),
	  'span-0' => array(
	    '#theme' => 'html_tag',
	    '#tag' => 'span',
	    '#value' => '',
	    '#attributes' => array(
	      'class' => array('play'),
	      'alt' => t('Play this video')
	    ),
	  ),
  );
  return drupal_render($render_array);
}

function dlts_clip_playlist_ios_markup($data) {
	dpm(__FUNCTION__);
	$links = '';

  $first_video = array_shift ( array_values ( $data['stream'] ) ) ;

  $inline_style = '.flowplayer { background-image: url(' . $data['poster'] . '); }' ;

  foreach ( $data['stream'] as $stream ) {

  	$links .= l ('', $stream['m3u'], array( 'external' => TRUE, 'attributes' => array ( 'id' => $stream['identifier'] , 'data-duration' => $stream['duration'] , 'data-start' => $stream['start'] , ) ) ) ;

  	$inline_style .= '.flowplayer .fp-playlist #' . $stream['identifier'] . ' { background: url(' . $stream['representative_image']['thumbnails_playlist'] . ') no-repeat; }' ;

  	$inline_style .= '.flowplayer.is-ready .fp-playlist a#' . $stream['identifier'] . ', .flowplayer.is-loading .fp-playlist a#' . $stream['identifier'] . ' { background: url(' . $stream['representative_image']['thumbnail'] . ') no-repeat; }' ;

  }

  /** HTML markup */
  $output =
   '<style>' . $inline_style . '</style>
	  <div id="' . $data['identifier'] . '" data-fullscreen="true" data-duration="'. $first_video['duration'] . '" data-start="'. $first_video['start'] . '" class="dlts_playlist flowplayer is-splash">
      <video>
        <source type="application/x-mpegurl" src="' . $first_video['m3u'] . '">
      </video>
      <a class="fp-prev" title="prev">&lt;</a>
      <a class="fp-next" title="next">&gt;</a>
      <div class="fp-playlist">' . $links . '</div>
    </div>' ;

  return $output ;

}

function dlts_clip_clip_markup($data) {
  /** HTML markup */
  $render_array = array (
    '#type' => 'container',
	  '#attributes' => array (
	    'id' =>  $data['identifier'],
	    'data-f4m' => $data['url'],
	    'class' => array ('dlts_clip', $data['type']),
	    'style' => 'background-image: url(' . $data['image']['poster'] . ');'
    ),
    'span-0' => array (
      '#theme' => 'html_tag',
	    '#tag' => 'span',
	    '#value' => '',
	    '#attributes' => array (
	      'class' => array ('play'),
	      'alt' => t('Play this video')
      ),
    ),
  ) ;
  return drupal_render($render_array);
}

function dlts_clip_clip_ios_markup ( $data ) {
	dpm(__FUNCTION__);
  /** HTML markup */

  // While I figure how to get this done right; render arrays are ugly ...
  $source = array (
    '#theme' => 'html_tag',
    '#tag' => 'source',
    '#attributes' => array (
      'src' => $data['url'],
      'type' => 'application/x-mpegurl',
    ),
  ) ;

  $render_array = array (
    '#type' => 'container',
      '#attributes' => array (
        'id' =>  $data['identifier'],
        'data-duration' => ( isset ( $data['duration'] ) ? $data['duration'] : 0 ) ,
        'data-start' => ( isset ( $data['start'] ) ? $data['start'] : 0 ) ,
        'data-fullscreen' => 'true' ,
        'class' => array ( 'flowplayer' , 'is-splash' , ) ,
        'style' => 'background-image: url(' . $data['image']['poster'] . ')' ,
      ),
      'video-0' => array (
        '#theme' => 'html_tag',
        '#tag' => 'video',
        '#value' => drupal_render ( $source ),
        '#attributes' => array (
          'poster' => $data['image']['poster'],
        ),
      ),
  ) ;

  return drupal_render ( $render_array ) ;

}

function dlts_clip_bitstream_markup($data) {
  /** HTML markup */
  $render_array = array(
    '#type' => 'container',
      '#attributes' => array(
        'id' =>  $data['identifier'],
        'data-f4m' => $data['f4m'],
        'class' => array($data['media_type']),
      ),
      'span-0' => array(
        '#theme' => 'html_tag',
        '#tag' => 'span',
        '#value' => '',
        '#attributes' => array(
          'class' => array('play'),
          'alt' => t('Play this video')
        ),
      ),
  );
  return drupal_render($render_array);
}

function dlts_clip_bitstream_ios_markup($data) {
  // make a render array?
  /** HTML markup */
  $output = '
    <div id="' . $data['identifier'] . '" data-fullscreen="true" class="flowplayer">
      <video>
        <source type="application/x-mpegurl" src="' . $data['m3u'] . '">
      </video>
    </div>' ;

	return $output ;

}

/**
 * Utility methods
 */
function dlts_clip_mobile_detect() {
  include_once libraries_get_path('Browser.php') . '/lib/Browser.php';
  $browser = new Browser();
  $detect = mobile_detect_get_object();
  return array(
    'isTablet' => $detect->isTablet(),
    'isMobile' => $detect->isMobile(),
    'isiOS' => $detect->isiOS(),
  	'isSafari' => ($browser->getBrowser() == Browser::BROWSER_SAFARI),
  );
}

/**
 * Implements hook_menu_alter.
 * Check access for forum menu item.
 */
function dlts_clip_menu_alter ( &$items ) {
  $items['user/register']['access callback'] = FALSE;
  $items['user/password']['access callback'] = FALSE;
}

/**
 * Themes functions
 */
function theme_dlts_clip_oembed($arguments) {
	dpm(__FUNCTION__);
  return '<iframe id="oembed" src="' . $arguments['url'] .'" width="' . $arguments['width'] .'" height="' . $arguments['height'] .'"><p>' . t('Your browser does not support iframes.') . '</p></iframe>';
}

/**
 * Supports the REST style embed
 */
function dlts_clip_embed_using_id ( $node ) {
	dpm(__FUNCTION__);
  return ( is_object ( $node ) ) ? dlts_clip_embed_response( $node ) : MENU_NOT_FOUND;
}

/**
 * Generate a response to a client oEmbed request.
 *
 * @return
 *   A keyed array to be converted into JSON
 *
 * @todo Test oembed_node for whether it's actually a node
 */
function dlts_clip_embed_response ( $node, $pre_response = array() ) {
	dpm(__FUNCTION__);
  $argument_defaults = array(
    'format' => 'JSON',
	  'width' => 480,
	  'height' => 640,
	  'callback' => '',
	  'iframe' => TRUE,
	  'mode' => 'single_page',
  );

  $ewrapper = entity_metadata_wrapper('node', $node);

  $arguments = array_merge( $argument_defaults, $pre_response );

  $author = t('undefined');

  $author_url = t('undefined');

  /** representitive image */
  $thumbnail_url = '';

  if (!empty($arguments['uri']['modified'])) {
    $url = url( $arguments['uri']['modified'], array('query' => array ('oembed' => 'true'), 'absolute' => TRUE));
  }
  else {
    $url = url( $arguments['uri']['request'], array('query' => array ('oembed' => 'true')));
  }

  $response = array(
    'type' => 'rich',
    'version' => '1.0',
    'title' => $ewrapper->title->value(),
    'author_name' => $author,
    'author_url' => $author_url,
    'provider_name' => t('NYU Digital Library Technology Services'),
    'provider_url' => t('http://dlib.nyu.edu/'),
    'cache_age' => 86400,
    'thumbnail_url' => $thumbnail_url,
    'thumbnail_width' => 100,
    'thumbnail_height' => 154,
    'width' => (int) $arguments['width'],
    'height' => (int) $arguments['height'],
  );
  if ($arguments['iframe']) {
    $response['html'] = theme('dlts_clip_oembed', array( 'url' => $url, 'width' => $arguments['width'], 'height' => $arguments['height'] ) );
  }
  return $response;
}

/**
 * Preprocesses the wrapping HTML.
 * Adds Apple's devices tags
 *
 *
 * @param array &$variables
 *   Template variables.
 */
function dlts_clip_preprocess_html(&$vars) {
  $meta = array(
    'apple_mobile_web_app_capable' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' =>  'apple-mobile-web-app-capable',
        'content' => 'yes',
      ),
      'apple_mobile_web_app_status_bar_style' => array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'apple-mobile-web-app-status-bar-style',
          'content' => 'black-translucent',
        )
      )
    ),
  );
  foreach ($meta as $key => $value) {
    drupal_add_html_head($value, $key);
  }
}
