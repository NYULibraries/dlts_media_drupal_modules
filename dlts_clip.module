<?php

/** Player helper */
module_load_include('inc', 'dlts_clip', 'inc/flowplayer');

/**
 * A wildcard loader for dlts_clip nodes, using the clip identifier.
 *
 * @parameter $identifier
 *  The value of field_identifier for a dlts_clip node.
 *
 * @return
 * A node object with the given value for field_identifier.
 *
 * @todo
 * field_identifier is supposed to be unique across all books, but we do
 * no checking of this assumption.
 * @todo
 * Does the query need to be tagged as node_access? We're checking node_access
 * via the menu system, but since the loader is called before access is
 * checked, adding a check here might save an entity_load if the user's not
 * going to have access anyway, at the cost of an extra JOIN here.
 */
function dlts_clip_load ($identifier) {

  $query = new EntityFieldQuery;

  $identifier = filter_xss($identifier);

  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'dlts_clip')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_identifier', 'value', $identifier, '=')
    ->addTag('node_access')
    ->execute();

  if (!empty($result['node'])) {
  	$keys = array_keys($result['node']);
  	return node_load(array_pop($keys));
  }

  return FALSE;

}

/**
 * A wildcard loader for dlts_creativework nodes, using the CreativeWork identifier.
 *
 * @parameter $identifier
 *  The value of field_identifier for a dtls_creativework node.
 *
 * @return
 * A node object with the given value for field_identifier.
 *
 * @todo
 * field_identifier is supposed to be unique across all CreativeWork, but we do
 * no checking of this assumption.
 * @todo
 * Does the query need to be tagged as node_access? We're checking node_access
 * via the menu system, but since the loader is called before access is
 * checked, adding a check here might save an entity_load if the user's not
 * going to have access anyway, at the cost of an extra JOIN here.
 */
function dlts_creativework_load ($identifier) {

  $query = new EntityFieldQuery;

  $identifier = filter_xss($identifier);

  $result = $query
  	->entityCondition('entity_type', 'node')
  	->entityCondition('bundle', 'dlts_creativework')
  	->propertyCondition('status', 1)
  	->fieldCondition('field_identifier', 'value', $identifier, '=')
  	->addTag('node_access')
  	->execute();

  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
  	return node_load(array_pop($keys));
  }

  return FALSE;

}

/**
 * A wildcard loader for dlts_playlist nodes, using the playlist identifier.
 *
 * @parameter $identifier
 *  The value of field_identifier for a dlts_playlist node.
 *
 * @return
 * A node object with the given value for field_identifier.
 *
 * @todo
 * field_identifier is supposed to be unique across all playlist, but we do
 * no checking of this assumption.
 * @todo
 * Does the query need to be tagged as node_access? We're checking node_access
 * via the menu system, but since the loader is called before access is
 * checked, adding a check here might save an entity_load if the user's not
 * going to have access anyway, at the cost of an extra JOIN here.
 */
function dlts_playlist_load ($identifier) {

  $query = new EntityFieldQuery;

  $identifier = filter_xss($identifier);

  $result = $query
   	->entityCondition('entity_type', 'node')
   	->entityCondition('bundle', 'dlts_playlist')
   	->propertyCondition('status', 1)
   	->fieldCondition('field_identifier', 'value', $identifier, '=')
   	->addTag('node_access')
   	->execute();

  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
   	return node_load(array_pop($keys));
  }

  return FALSE;

}

function dlts_clip_init() {
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
}

/**
 * Implements hook_menu().
 */
function dlts_clip_menu () {
  return array(
    'creative-work/%dlts_creativework/mode/embed' => array(
	  'title' => 'Creative Work embed view',
	  'access arguments' => array('access content'),
	  'page callback' => 'dlts_clip_embed_display',
	  'page arguments' => array(1),
	  'delivery callback' => 'drupal_deliver_html_page',
	  'type' => MENU_CALLBACK,
  ),
  'playlists/%dlts_playlist/mode/embed' => array(
    'title' => 'Playlist embed view',
	  'access arguments' => array('access content'),
	  'page callback' => 'dlts_clip_embed_display',
	  'page arguments' => array(1),
	  'delivery callback' => 'drupal_deliver_html_page',
	  'type' => MENU_CALLBACK,
  ),
  'clip/%dlts_clip/mode/embed' => array(
    'title' => 'Clip embed view',
	  'access arguments' => array('access content'),
	  'page callback' => 'dlts_clip_embed_display',
	  'page arguments' => array(1),
	  'delivery callback' => 'drupal_deliver_html_page',
	  'type' => MENU_CALLBACK,
  ),
  'admin/config/dlts-clip' => array(
    'title' => 'Flowplayer',
    'description' => 'Configure settings related to Flowplayer.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dlts_clip_player_flowplayer_config'),
    'access arguments' => array('access administration pages'),
    'file' => 'inc/dlts_clip.admin.inc',
    ),
    'content/%/nodeid' => array(
		  'title' => 'Experimenting with node loading',
		  'page callback' => 'dlts_clip_return_nodeid_json',
		  'page arguments' => array(1),
		  'access arguments' => array('access content'),
		  'type' => MENU_CALLBACK,
	  ),
  );
}

/**
 * Implements hook_custom_theme().
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_custom_theme/7
 */
function dlts_clip_custom_theme () {

  /** Get the arguments from Drupal path */
  $arg = arg();
  /** count should be eq 4. we want to match /{resource}/{identifier}/mode/embed */
  $count = count($arg);
  /** we have 4 arguments and they match a embed request; return embed theme instead of the default */
  if ( $count > 3 && $arg[$count - 1] === 'embed' && $arg[$count - 2] === 'mode') return 'dlts_embed';

  else return 'rubik';
}

/**
 * Implements hook_field_info().
 */
function dlts_clip_field_info () {
  return array(
    'dlts_clip_field' => array(
      'label' => t('DLTS Clip'),
      'description' => t('Store data about a media Clip.'),
      'default_widget' => 'dlts_clip_field',
      'default_formatter' => 'dlts_clip_default_formatter',
      /** Support hook_entity_property_info() from contrib "Entity API". */
    	'property_type' => 'dlts_clip_field',
    	'property_callbacks' => array('dlts_clip_field_property_info_callback'),
    ),
  );
}

/**
 * Additional callback to adapt the property info of fileserver fields.
 *
 * @see entity_metadata_field_entity_property_info()
 */
function dlts_clip_field_property_info_callback (&$info, $entity_type, $field, $instance, $field_type) {
	$property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
	// Define a data structure so it's possible to deal with
	// both the uri title and data.
	$property['getter callback'] = 'entity_metadata_field_verbatim_get';
	$property['setter callback'] = 'entity_metadata_field_verbatim_set';
	// Auto-create the field item as soon as a property is set.
	$property['auto creation'] =  'dlts_clip_field_item_create';
	$property['property info'] = dlts_clip_field_item_property_info();
	unset($property['query callback']);
}

/**
 * Callback for creating a new, empty link field item.
 *
 * @see link_field_property_info_callback()
 */
function dlts_clip_field_item_create () {
  return array(
    'identifier' => NULL,
    'f4m' => NULL,
    'm3u' => NULL,
    'pd' => NULL,
  );
}

/**
 * Defines info for the properties of the link-field item data structure.
 */
function dlts_clip_field_item_property_info () {

  $properties['identifier'] = array(
    'type' => 'varchar',
		'label' => t('Object identifier'),
		'setter callback' => 'entity_property_verbatim_set',
	);

	$properties['f4m'] = array(
    'type' => 'varchar',
		'label' => t('Flash Media Manifest (F4M)'),
		'setter callback' => 'entity_property_verbatim_set',
	);

	$properties['m3u'] = array(
		'type' => 'varchar',
		'label' => t('M3U Playlist'),
	  'setter callback' => 'entity_property_verbatim_set',
	);

	$properties['pd'] = array(
		'type' => 'varchar',
		'label' => t('Progressive Download; media file over HTTP'),
	  'setter callback' => 'entity_property_verbatim_set',
	);

	return $properties;

}

/**
 * Entity property info getter callback for fileserver attributes.
 */
function dlts_clip_field_attribute_property_get ($data, array $options, $name, $type, $info) {
  return isset($data[$name]) ? array_filter($data[$name]) : array();
}

/**
 * Implements hook_theme().
 */
function dlts_clip_theme ($existing, $type, $theme, $path) {  

  // $items = array();
  // Content theming.
  // $items['node'] = array(
  //   'path' => drupal_get_path('theme', 'dlts_embed') .'/templates',
  //   'template' => 'object',
  // );
  // $items['node']['template'] = 'node';
  // return $items;

  return array(
    'dlts_clip_video' => array(
      'template' => 'templates/video',
      'variables' => array(
        'm3u' => NULL,
        'identifier' => NULL,
      ),
    ),
    'dlts_clip_playlist' => array(
      'template' => 'templates/playlist',
      'variables' => array(
        'm3u' => NULL,
        'duration' => NULL,
        'start' => 0,
        'classes' => array(),
        'links' => NULL,
      ),
    ),   
    'dlts_clip_media' => array (
      'variables' => array (
      	'identifier' => NULL,
      	'f4m' => NULL,
      	'type' => NULL,
      	'm3u' => NULL,
      	'pd' => NULL,
      ),
    ),
    array (
      'dlts_clip_oembed' => array(
        'template' => 'templates/oembed',
        'variables' => array(
          'url' => NULL,
          'width' => NULL,
          'height' => NULL,
          'message' => t('Your browser does not support iframes.'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function dlts_clip_field_validate ($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
  	if (!empty($item['identifier'])) {
      if (!preg_match('/[0-9a-zA-Z_-]/', $item['identifier'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array( 'error' => 'Clip identifier invalid');
      }
    }
  }
}

/**
 * Implement hook_field_is_empty().
 */
function dlts_clip_field_is_empty ($item, $field) {
  /** @TODO: check for the manifest */
  return empty($item['identifier']);
}

/**
 * Implementation of hook_node_view()
 * Act on a node that is being assembled before rendering.
 * See: https://api.drupal.org/api/drupal/modules%21node%21node.api.php/function/hook_node_view/7
 */
function dlts_clip_node_view ($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'dlts_playlist':
  	  dlts_embed_node_view_dlts_playlist($node);
  	  break;
    case 'dlts_clip':
      dlts_embed_node_view_dlts_clip($node);
  	  break;
    case 'dlts_bitstream_set':
  	  dlts_embed_node_view_dlts_bitstream_set($node);
  	  break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function dlts_clip_field_formatter_info () {
  return array(
    'dlts_clip_default_formatter' => array(
      'label' => t('Default'),
      'field types' => array('dlts_clip_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function dlts_clip_field_formatter_view ($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'dlts_clip_default_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('dlts_clip_media' , $item);
      }
      break ;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function dlts_clip_field_widget_info () {
  return array (
    'dlts_clip_default' => array (
      'label' => t('Clip file for streaming video'),
      'field types' => array ('dlts_clip_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function dlts_clip_field_widget_form (&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#delta' => $delta,
    '#type' => 'fieldset',
    'identifier' => array(
      '#type' => 'textfield',
      '#title' => 'Clip Identifier',
      '#size' => 50,
      '#default_value' => isset($items[$delta]['identifier']) ? $items[$delta]['identifier'] : '',
      '#attributes' => array(
        'placeholder' => 'xxxxxxxxxx',
      ),
    ),
    'f4m' => array(
      '#type' => 'textfield',
      '#title' => 'Flash Media Manifest (F4M)',
      '#size' => 50,
      '#default_value' => isset($items[$delta]['f4m']) ? $items[$delta]['f4m'] : '',
      '#attributes' => array(
        'placeholder' => 'http://example.com/manifest.f4m',
      ),
    ),
    'm3u' => array(
      '#type' => 'textfield',
      '#title' => 'M3U Playlist',
      '#size' => 50,
      '#default_value' => isset($items[$delta]['m3u']) ? $items[$delta]['m3u'] : '',
      '#attributes' => array(
        'placeholder' => 'http://example.com/manifest.m3u',
      ),
    ),
    'pd' => array(
      '#type' => 'textfield',
      '#title' => 'Progressive Download; media file over HTTP',
      '#size' => 50,
      '#default_value' => isset($items[$delta]['pd']) ? $items[$delta]['pd'] : '',
      '#attributes' => array(
        'placeholder' => 'http://example.com/clip.mp4',
      ),
    ),
  );
  return $element;
}

function dlts_clip_preprocess_page(&$variables) {
  header_remove('X-Frame-Options');
  if (isset($variables['node'])) {
    $arg = arg();
    if (array_pop($arg) !== 'edit') {
      $type = $variables['node']->type;
      switch ($type) {
        case 'dlts_playlist':
        case 'dlts_clip':
          /** Load Mobile Detect */
          $detect = dlts_clip_mobile_detect();
          /** Let the client know more about the browser */
          drupal_add_js(array('dlts_clip' => array('detect' => $detect)), 'setting');
          /** Flowplayer CSS */
          drupal_add_css('//releases.flowplayer.org/7.0.4/skin/skin.css', 'external');
          /** Flowplayer JavaScript */
          drupal_add_js('//releases.flowplayer.org/7.0.4/flowplayer.min.js', 'external');
          /** The hlsjs plugin for playback of HLS without Flash in modern browsers */
          drupal_add_js('//releases.flowplayer.org/hlsjs/flowplayer.hlsjs.min.js', 'external');
  	      break;
      }      
    }
  }
}

/**
 * Implements hook_field_instance_settings_form().
 */
function dlts_clip_field_instance_settings_form ($field, $instance) {
  $form = array(
    'display' => array(
      '#tree' => TRUE,
    ),
    'attributes' => array(
      '#tree' => TRUE,
    ),
  );
  return $form;
}

function dlts_embed_node_view_dlts_clip ($node) {

  $dlts_clip_wrapper = entity_metadata_wrapper('node', $node);

  $bitstream_wrapper = entity_metadata_wrapper('node', $dlts_clip_wrapper->field_bitstream_ref->value());  

  $identifier = $dlts_clip_wrapper->field_identifier->value();

  $start = (int) $dlts_clip_wrapper->field_start->value();

  $duration = (int) $dlts_clip_wrapper->field_duration->value();

  $thumbnail = $dlts_clip_wrapper->field_thumbnail->value();

  /** Representative image */
  $ri = array();

  foreach (array('poster', 'thumbnail', 'large', 'playlist') as $style) {
    $ri[$style] = image_style_url($style, $thumbnail['uri']);
  }

  $bitstream = $bitstream_wrapper->field_bitstream->value();

  $bitstreamId = $bitstream['identifier'];

  $m3u = $bitstream['m3u'];

  $data = array(
    'image' => $ri,
    'duration' => $duration,
    'identifier' => $bitstreamId,
    'start' => $start,
    'url' => $m3u,
  );

  $configuration = array(
    'dlts_clip' => array(
      'media' => array(
        $bitstreamId => array(
          'duration' => $duration, 
          'start' => $start
        )
      )
    )
  );
  
  $node->content['field_bitstream_ref'] = array(
    '#type' => 'markup', 
    '#markup' => dlts_clip_markup($data)
  );

  drupal_add_js($configuration, 'setting');

}

function dlts_embed_node_view_dlts_bitstream_set ($node) {

	/** Wrap it with Entity API */
	$wrapper = entity_metadata_wrapper('node', $node);

	$identifier = $wrapper->field_identifier->value();

  $data = $wrapper->field_bitstream->value();

	$node->content['field_bitstream'] = array(
    '#type' => 'markup', 
    '#markup' => theme('dlts_clip_video', $data)
  );

  drupal_add_js(array('dlts_clip' => array('media' => array($identifier => $data))), 'setting');  

}

function dlts_embed_node_view_dlts_playlist ($node) {

  /** load Mobile Detect */
  $detect = dlts_clip_mobile_detect();

  /** Wrap it with Entity API */
  $dlts_playlist_wrapper = entity_metadata_wrapper('node', $node);

  $playlist_identifier = $dlts_playlist_wrapper->field_identifier->value();

  $playlist_representative_image = $dlts_playlist_wrapper->field_thumbnail->value();

  $poster = image_style_url('poster' , $playlist_representative_image['uri']);

  $references = array();

  $media = array();

  $data = array('identifier' => $playlist_identifier, 'poster' => $poster);

  $data['stream'] = array();

  $clips = $dlts_playlist_wrapper->field_clip_ref;

  foreach ($clips->getIterator() as $clip) {

    /** Representative image */

    $thumbnail = $clip->field_thumbnail->value();
    
  	$clip_identifier = $clip->field_identifier->value();

  	$references[] = $clip_identifier;

  	$bitstream_ref = $clip->field_bitstream_ref->value();

  	$bitstream = $bitstream_ref->field_bitstream[$node->language][0];

    $bitstream['representative_image'] = array();

    foreach (array('poster', 'thumbnail', 'large', 'playlist') as $style) {
      $bitstream['representative_image'][$style] = image_style_url($style, $thumbnail['uri']);
    }    
  	
  	$bitstream['start'] = $clip->field_start->value();
  	
  	$bitstream['duration'] = $clip->field_duration->value();

  	/** for now until i get this right */
  	$data['stream'][$clip_identifier] = $bitstream;

  }

  $markup = dlts_clip_playlist_markup($data);

  $node->content['field_clip_ref'] = array('#type' => 'markup', '#markup' => $markup);

  drupal_add_js(array('dlts_clip' => array('playlists' => array($playlist_identifier => $references), 'media' => $data['stream'])), 'setting');  

}

/**
 * Implements hook_element_info().
 */
function dlts_clip_element_info () {

  $elements = array();

  $elements['dlts_clip_field'] =  array(
    '#input' => TRUE,
  );

  return $elements;

}

/**
 * Process the link type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function dlts_clip_field_process ( $element, $form_state, $complete_form ) {

  $settings = &$form_state['field'][$element['#field_name']][$element['#language']]['instance']['settings'];

  $element['identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifier'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );

  $element['f4m'] = array(
    '#type' => 'varchar',
    '#title' => t('Flash Media Manifest (F4M)'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );

  $element['m3u'] = array(
    '#type' => 'varchar',
    '#title' => t('M3U Playlist'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );

  $element['pd'] = array(
    '#type' => 'varchar',
    '#title' => t('M3U Playlist'),
    '#required' => TRUE,
    '#default_value' => NULL,
  );

  return $element;

}

function dlts_embed_dlts_clip (&$vars) {
  $ewrapper = entity_metadata_wrapper('node', $vars['node']);
  $bitstream_ref = $ewrapper->field_bitstream_ref->value();
  if (isset($bitstream_ref->nid)) {
    $bitstream_wrapper = entity_metadata_wrapper('node', $bitstream_ref);
    $configuration = array(
      'dlts_clip' => array(
        'media' => array(
          $identifier => array(
            'url' => $bitstream_wrapper->field_identifier->value(), 
            'duration' => (int) $ewrapper->field_duration->value(), 
            'start' => (int) $ewrapper->field_start->value(),
          )
        )
      )
    );
    drupal_add_js($configuration, 'setting');
  }
}

/**
 * Implements hook_entity_info_alter().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_entity_info_alter/7
 */
function dlts_clip_entity_info_alter (&$entity_info) {
  $entity_info['node']['view modes']['embed'] = array(
    'label' => t('Embed mode'),
    'custom settings' => TRUE,
  ) ;
}

/**
 * Implements hook_preprocess_node().
 * https://api.drupal.org/api/drupal/modules!node!node.module/function/template_preprocess_node/7
 */
function dlts_clip_preprocess_node (&$vars) {
  if ($vars['view_mode'] == 'embed') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__embed';
  }
}

/**
 * Given a node, return the Embed view. Embed view can be customize in manage
 * display section for each Content type 
 * e.g., {site}/admin/structure/types/manage/{content-type}/display
 */
function dlts_clip_embed_display ($node) {
  return node_view($node, 'embed');
}

/**
 * Theme functions
 */
function theme_dlts_clip_media ($vars) {

  $type = 'dlts_clip';

  $identifier = $vars['identifier'];
  
  $vars['type'] = $type;  

  drupal_add_js(
    array(
      'dlts_clip' => array(
        'media' => array(
          $identifier => $vars
      )
    )
  ), 'setting');

  $render_array = dlts_clip_video_markup($vars);

  return drupal_render($render_array);

}

function dlts_clip_video_markup ($vars) {
  $identifier = (isset($vars['identifier'])) ? $vars['identifier'] : NULL;
  $m3u = (isset($vars['m3u'])) ? $vars['m3u'] : NULL;
  $class = (isset($vars['type'])) ? array($vars['type']) : array();
  // HTML markup
  $render_array = array(
    '#type' => 'container',
	  '#attributes' => array(
	    'id' => $identifier,
	    'data-hsl' => $m3u,
	    'class' => $class,
    ),
	  'span-0' => array(
	    '#theme' => 'html_tag',
	    '#tag' => 'span',
	    '#value' => '',
	    '#attributes' => array(
	      'class' => array('play'),
          'alt' => t('Play this video')
        ),
      ),
  );
  return $render_array;
}

function dlts_clip_playlist_markup ($data) {

  $links = '';

  $streams = array_values($data['stream']);

  $stream = array_shift($streams);

  $first_video = $stream;

  $first_video_duration = $first_video['duration'];

  $first_video_start = $first_video['start'];

  $first_video_m3u = $first_video['m3u'];

  $poster = $data['poster'];

  $inline_style = ".flowplayer { background-image: url('$poster'); }";

  foreach ($streams as $item) {

    $identifier = $item['identifier'];

    $m3u = $item['m3u'];

    $duration = $item['duration'];

    $start = $item['start'];

    $image = $item['representative_image']['thumbnail'];
  
  	$links .= l('', $m3u, array(
  	  'external' => TRUE, 
  	  'attributes' => array(
  	    'id' => $identifier, 
        'data-duration' => $duration, 
        'data-start' => $start
  	    )
  	  )
  	);

  	$inline_style .= ".flowplayer .fp-playlist #$identifier { background: url('$image') no-repeat; }";

  	$inline_style .= ".flowplayer.is-ready .fp-playlist a#$identifier, .flowplayer.is-loading .fp-playlist a#$identifier { background: url('$image') no-repeat; }";

  }

  $data = array(
    'style' => $inline_style,
    'identifier' => $identifier,
    'duration' => $first_video_duration,
    'start' => $first_video_start,
    'classes' => array('dlts_playlist', 'flowplayer', 'is-splash'),
    'm3u' => $first_video_m3u,
    'links' => $links,
    'poster' => $poster,
  );
  
  return theme('dlts_clip_playlist', $data);

}

function dlts_clip_markup ($data) {
  /** HTML markup */
  $source = array( 
    '#theme' => 'html_tag',
    '#tag' => 'source',    
    '#attributes' => array (
      'src' => $data['url'],
      'type' => 'application/x-mpegurl',      
    ),
  );  
  $render_array = array(
    '#type' => 'container',
      '#attributes' => array(
        'id' =>  $data['identifier'],
        'data-duration' => ( isset ( $data['duration'] ) ? $data['duration'] : 0 ) ,
        'data-start' => ( isset ( $data['start'] ) ? $data['start'] : 0 ) ,
        'data-fullscreen' => 'true' ,        
        'class' => array('flowplayer' , 'is-splash'),
        'style' => 'background-image: url(' . $data['image']['poster'] . ')' ,
        'poster' => $data['image']['poster'],
      ),
      'video-0' => array(
        '#theme' => 'html_tag',
        '#tag' => 'video',
        '#value' => drupal_render($source),
        '#attributes' => array (
          'poster' => $data['image']['poster'],
        ),
      ),
  ) ; 

  return drupal_render($render_array);

}

/**
 * Implements hook_menu_alter.
 * Check access for forum menu item.
 */
function dlts_clip_menu_alter (&$items) {
  $items['user/register']['access callback'] = FALSE;
  $items['user/password']['access callback'] = FALSE;
}

/**
 * Preprocesses the wrapping HTML.
 *
 * @param array &$variables
 *   Template variables.
 */
function dlts_clip_preprocess_html (&$vars) {
  $detect = dlts_clip_mobile_detect();
  if ($detect['isiOS'] || $detect['isSafari']) {
    $attributes = array(
      'apple_mobile_web_app_capable' => array(
        'name' =>  'apple-mobile-web-app-capable',
        'content' => 'yes',
      ),
      'apple_mobile_web_app_status_bar_style' => array(
        'name' => 'apple-mobile-web-app-status-bar-style',
        'content' => 'black-translucent',
      ),
    );
    foreach ($attributes as $attribute => $meta) {
      drupal_add_html_head(
        array(
          '#type' => 'html_tag', 
          '#tag' => 'meta', 
          '#attributes' => $meta
        ), $attribute);
    }
  }
}

function dlts_clip_mobile_detect () {
  $detect = &drupal_static('detect');
  if (!isset($detect)) {
    include_once libraries_get_path('Browser.php') . '/lib/Browser.php' ;
    $browser = new Browser();
    $detect = mobile_detect_get_object();
    $detect = array(
      'isTablet' => $detect->isTablet(),
      'isMobile' => $detect->isMobile(),
      'isiOS' => $detect->isiOS(),
  	  'isSafari' => ($browser->getBrowser() == Browser::BROWSER_SAFARI),
    );  
  }
  return $detect;
}

function dlts_clip_return_nodeid_json ($id) {
	$query = new EntityFieldQuery();
 	$query->entityCondition('entity_type', 'node', '=')
     ->fieldCondition('field_identifier', 'value', $id, '=');
 	$result = $query->execute();
	$nodeids = array();
	if (isset($result['node'])) {
		foreach ($result['node'] as $node) {
			$nodeids[] = $node->nid;
		}
	}
	echo drupal_json_encode($nodeids);	
	die;
}
